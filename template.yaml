Parameters:
  S3Name:
    Type: String
  stage:
    Type: String
Resources :
    RestApi :
        Type : AWS::ApiGateway::RestApi
        Properties :
          Body:
            swagger: "2.0"
            info:
              version: "2016-10-21T17:26:28Z"
              title: "sampleapi"
            host: "abcdefg.com"
            schemes:
            - "https"
            paths:
              /:
                put:
                  produces:
                  - "application/json"
                  parameters:
                  - name: "c"
                    in: "query"
                    required: true
                    type: "string"
                  - name: "hour"
                    in: "query"
                    required: true
                    type: "string"
                  - name: "date"
                    in: "query"
                    required: true
                    type: "string"
                  - name: "key"
                    in: "query"
                    required: false
                    type: "string"
                  - name: "a"
                    in: "query"
                    required: true
                    type: "string"
                  - name: "b"
                    in: "query"
                    required: true
                    type: "string"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                    "500":
                      description: "500 response"
                  security:
                  - authorizer: []
                  x-amazon-apigateway-integration:
                    credentials: 
                        Fn::GetAtt:
                         - apiputRole
                         - Arn
                    httpMethod: "PUT"
                    uri: !Join 
                      - ''
                      - - 'arn:aws:apigateway:'
                        - !Ref 'AWS::Region'
                        - ':s3:path/'
                        -  !Ref S3Name
                        - '/a={a}/b={b}/c={c}/date={date}/{hour}.jpg'
                    responses:
                      default:
                        statusCode: "500"
                      "2\\d{2}":
                        statusCode: "200"
                    requestParameters:
                      integration.request.path.c: "method.request.querystring.c"
                      integration.request.path.b: "method.request.querystring.b"
                      integration.request.path.date: "method.request.querystring.date"
                      integration.request.path.a: "method.request.querystring.a"
                      integration.request.path.hour: "method.request.querystring.hour"
                    passthroughBehavior: "when_no_match"
                    contentHandling: "CONVERT_TO_BINARY"
                    type: "aws"
            securityDefinitions:
              authorizer:
                type: "apiKey"
                name: "Authorization"
                in: "header"
                x-amazon-apigateway-authtype: "custom"
                x-amazon-apigateway-authorizer:
                  authorizerUri: !Join 
                      - ''
                      - - 'arn:aws:apigateway:'
                        - !Ref 'AWS::Region'
                        - ':lambda:path/2015-03-31/functions/'
                        - !GetAtt 
                          - LambdaAuthorizer
                          - Arn
                        - /invocations
                  authorizerResultTtlInSeconds: 300
                  identitySource: "method.request.header.Authorization"
                  type: "request"
            definitions:
              Empty:
                type: "object"
                title: "Empty Schema"
            x-amazon-apigateway-binary-media-types:
            - "application/octet-stream"
            - "image/jpeg"
    Deployment:
      Type: 'AWS::ApiGateway::Deployment'
      Properties:
        RestApiId: !Ref RestApi
        StageName: !Ref stage
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Sub: lambda-role
        AssumeRolePolicyDocument:
          Statement:
            - Action:
              - sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
          Version: 2012-10-17
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSLambdaExecute
          
          
          
    LambdaAuthorizer:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: samplelambda
        Description: LambdaFunctioni of nodejs10.x.
        Runtime: nodejs10.x
        Code:
          ZipFile: |
            "exports.handler = function(event, context){
              var sample = sample;"
        Handler: ${LambdaHandlerPath}
        MemorySize: 128
        Timeout: 10
        Role:
          Fn::GetAtt:
            - LambdaRole
            - Arn
    apiputRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action: 'sts:AssumeRole'
        Path: /
        RoleName: apiputRole
        Policies:
          - PolicyName: apiputrole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                Effect: Allow
                Action:
                - s3:PutObject
                - s3:AbortMultipartUpload
                Resource: !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref S3Name
                        - '/*'
Outputs:
  Endpoint:
    Description: "API Prod stage endpoint"
    Value: !Join 
        - ''
        - -  "https://"
          - !Ref RestApi
          - ".execute-api."
          - !Ref 'AWS::Region' 
          - ".amazonaws.com/"
          - !Ref stage
